steps:
  # this is to call the main build to test
  - name: gcr.io/kittycorn-public/deploy-kittycorn:v2.0
    id: 'building_cortex_data_foundation'
    waitFor: ['-']
    script: |
      #!/usr/bin/env bash
      echo "Initiating CICD Build for Cortex Framework on $PROJECT_ID on ${_ENV} branch"
      _PROJECT=$(jq -r ."projectIdSource" config/config_${_ENV}.json)
      cp -f "config/config_${_ENV}.json" config/config.json
      _SUCCESS="false"
      gcloud builds submit \
        --config cicd_pipeline/cloudbuild.yaml \
        --project "${_PROJECT}" \
        --substitutions=_GCS_BUCKET="${_GCS_BUCKET}",_BUILD_ACCOUNT="${_BUILD_ACCOUNT}",_PIPELINE_TAG="${_ENV}",_CLOUD_BUILD_REGION="${_REGION}" \
        --region="${_REGION}" \
          && _SUCCESS="true"

      if [[ ${_SUCCESS} != "true" && (${_ENV} == "pre_production" || ${_ENV} == "production")]]; then
          echo -e "\nðŸ›‘ Data Foundation deployment has failed. ðŸ›‘"
          gcloud builds submit --config cicd_pipeline/cloudbuild.revert.yaml --substitutions=_GCS_BUCKET="${_GCS_BUCKET}",_ENV="${_ENV}"
          echo "Setup Notification to notify dev & user if test fails in pre-prod or build or test fails in prod"
          exit 1
      elif [[ ${_SUCCESS} != "true" ]]; then
          echo -e "\nðŸ›‘ Data Foundation deployment has failed. ðŸ›‘"
          exit 1
      fi

  - name: gcr.io/kittycorn-public/deploy-kittycorn:v2.0
    id: 'automated_testing_for_cortex'
    waitFor: ['building_cortex_data_foundation']
    script: |
      echo "Automated Testing"
      echo -e "\nâœ… Data Foundation has been successfully deployed. ðŸ¦„"

  - name: gcr.io/kittycorn-public/deploy-kittycorn:v2.0
    id: 'deploying_cortex_data_foundation'
    waitFor: ['automated_testing_for_cortex']
    script: |
      echo "Continuous Deployment"
      if [[ ${_ENV} == "development" ]]; then
        echo "==Deploying CICD Build for Cortex Framework to pre-production branch=="
        gcloud builds submit --config cicd_pipeline/cloudbuild.push.yaml --substitutions=_GCS_BUCKET="${_GCS_BUCKET}",_ENV="${_ENV}"
      elif [[ ${_ENV} == "pre_production" ]]; then
        echo "==Deploying CICD Build for Cortex Framework to production branch=="
        gcloud builds submit --config cicd_pipeline/cloudbuild.push.yaml --substitutions=_GCS_BUCKET="${_GCS_BUCKET}",_ENV="${_ENV}"
        echo "Setup Notification to notify user to test in pre-prod and to approve build to prod"
      elif [[ ${_ENV} == "production" ]]; then
        echo "Setup Notification to notify user change has been deployed to prod"
      fi
  # #!/usr/bin/env bash 
  # _PJID_SRC_=$(jq -r ."projectIdSource" ${_CONFIG_FILE})
  # _PJID_TGT_=$(jq -r ."projectIdTarget" ${_CONFIG_FILE})
  # _DS_REPORTING_=$(jq -r ."SAP.datasets.reporting" ${_CONFIG_FILE})
  # _DS_RAW_=$(jq -r ."SAP.datasets.raw" ${_CONFIG_FILE})
  # _DS_CDC_=$(jq -r ."SAP.datasets.cdc" ${_CONFIG_FILE})

  # echo "Deploying Oracle EBS Test Harness."
  # python3 src/pipeline/test_sap_workload.py --workload "OracleEBS" --dataset "cdc"

logsBucket: "gs://${_GCS_BUCKET}"
serviceAccount: "${_BUILD_ACCOUNT}"
timeout: 32400s
substitutions:
  _CONFIG_FILE: "config/config_${_ENV}.json"
  _REGION: "asia-southeast1"
options:
  substitution_option: "ALLOW_LOOSE"
  automapSubstitutions: true
tags: ["cortex-cicd-pipeline-${_ENV}"]